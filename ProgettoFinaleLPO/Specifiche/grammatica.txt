******GRAMMATICA LABORATORI 10/11**********

Grammatica BNF ambigua: 

Prog ::= StmtSeq 'EOF'
StmtSeq ::= Stmt | Stmt ';' StmtSeq
Stmt ::= 'var' ID '=' Exp | ID '=' Exp | 'print' Exp |  'for' ID ':' Exp '{' StmtSeq '}'
ExpSeq ::= Exp | Exp ',' ExpSeq
Exp ::= Exp BinOp Exp | '-' Exp| '[' ExpSeq ']' | NUM | ID | '(' Exp ')'
BinOp ::= '::' | '+' | '*'

***********************************************************************************************************

Grammatica EBNF non ambigua:

Prog ::= StmtSeq 'EOF'
StmtSeq ::= Stmt (';' StmtSeq)?
Stmt ::= 'var'? ID '=' Exp | 'print' Exp |  'for' ID ':' Exp '{' StmtSeq '}'
ExpSeq ::= Exp (',' ExpSeq)?
Exp ::= Add ('::' Exp)?
Add ::= Mul ('+' Mul)*
Mul::= Atom ('*' Atom)*
Atom ::= '-' Atom | '[' ExpSeq ']' | NUM | ID | '(' Exp ')'




*******************************************************************************************************************************************************************************************
*******************************************************************************************************************************************************************************************
****************************************************************GRAMMATICA PROGETTO FINALE*************************************************************************************************

Richieste aggiuntive alla grammatica dei laboratori:
      CATEGORIE LESSICALI
            -literal di tipo boolean rappresentati dalle due keyword {false ,true}
            -literal interi di tipo binario: iniziano con la cifra0, seguita dalla letteraboBe terminano con una sequenzanonvuotadi cifre binarie. L’interpretazione`e quella convenzionale: per esempio, il literal0b0111denota il numero 7.

      SINTASSI DELLE ESPRESSIONI
            -operatori binari: {&&, ==}; Associano entrambi a sinistra
            -operatori unari: {!, opt, empty, def, get}; Hanno la precedenza sugli operatoribinari infissi
            -Exp ::= (quello che c'era per il lab 10) | Exp && Exp | Exp == Exp | !Exp | opt Exp  |empty Exp | def Exp | get Exp
            -opt, empty, def e get sono nuove keyword
            -Per trattare correttamente il riconoscimento dei lessemi = e == tramite un’espressione regolare, elencare prima ==; quindi l’espressione regolare di forma == | = `e quella corretta
            
            Precedenza operatori binari:
                  1) &&    precedenza più bassa
                  2) ==
                  3) ::
                  4) +
                  5) *     precedenza più alta

      SINTASSI DEGLI STATEMENT
            -Stmt ::= (quello che c'era per il lab 10) | if (Exp) {StmtSeq} (else {StmtSeq})? | do {StmtSeq} while (Exp)
            -if, else, do e while sono nuove keyword.
            -la parte introdotta dalla keyword else e' opzionale
   
************************************************************************************************************************************************
*******************GRAMMATICA BNF AMBIGUA COSTRITA A PARTIRE DA QUELLA DEI LABORATORI CON LE AGGIUNTE RICHIESTE DAL TESTO*************************** 

cose aggiunte:
      1)aggiunto in EXP       : BOOL e BINARY
      2)aggiunto in BinOp     : && e ==
      3)aggiunto in Exp       : | !Exp | opt Exp  |empty Exp | def Exp | get Exp
      4)aggiunto in Stmt      :  | if (Exp) {StmtSeq} (else {StmtSeq})? | do {StmtSeq} while (Exp)


Prog ::= StmtSeq 'EOF'
StmtSeq ::= Stmt | Stmt ';' StmtSeq
Stmt ::= 'var' ID '=' Exp | ID '=' Exp | 'print' Exp |  'for' ID ':' Exp '{' StmtSeq '}' | if (Exp) {StmtSeq} (else {StmtSeq})? | do {StmtSeq} while (Exp)
ExpSeq ::= Exp | Exp ',' ExpSeq
Exp ::= Exp BinOp Exp | '-' Exp | '[' ExpSeq ']' | NUM | ID  | BOOL | BINARY | '(' Exp ')' | !Exp | opt Exp  |empty Exp | def Exp | get Exp
BinOp ::= '::' | '+' | '*' | '&&' | '=='

************************************************************************************************************************************************
*******************GRAMMATICA EBNF NON AMBIGUA COSTRITA A PARTIRE DA QUELLA DEI LABORATORI CON LE AGGIUNTE RICHIESTE DAL TESTO******************

cose aggiunte:
      1)aggiunto in Atom      :  {BOOL, BINARY}
      2)modificato Exp        : {Exp ::= Add ('::' Exp)?} -> {Exp ::= Cmp ('&&' Exp)?}
      3)creato Cmp (compara)
      4)creato CostList (costruttore liste)
      5)aggiunto in Atom      : {| '!' Atom | 'opt' Atom | 'empty' Atom | 'def' Atom | 'get' Atom |}
      6)aggiunto in Stmt      :  {| if (Exp) {StmtSeq} (else {StmtSeq})? | do {StmtSeq} while (Exp)} [44]


Prog        ::= StmtSeq 'EOF'
StmtSeq     ::= Stmt (';' StmtSeq)?
Stmt        ::= 'var'? ID '=' Exp | 'print' Exp |  'for' ID ':' Exp '{' StmtSeq '}' |  if (Exp) {StmtSeq} (else {StmtSeq})? | do {StmtSeq} while (Exp)
ExpSeq      ::= Exp (',' ExpSeq)?
Exp         ::= Equivalent ('&&' Exp)?
Equivalent  ::= Prefix ('==' Prefix)*
Prefix      ::= Add ('::' Add)*
Add         ::= Mul ('+' Mul)*
Mul         ::= Atom ('*' Atom)*
Atom        ::= '-' Atom | '!' Atom | 'opt' Atom | 'empty' Atom | 'def' Atom | 'get' Atom | '[' ExpSeq ']' | NUM | ID |  BOOL | BINARY | '(' Exp ')'

ATTENZIONE: la grammatica non è giusta, Atom deve essere aggiustato. empty, def e get possono prendere solo literal opzionali generati da 'opt' Atom
Opt         ::= ('opt')* Atom | 'empty' Opt
Atom        ::= '-' Atom | '!' Atom | 'def' Opt | 'get' Opt | '[' ExpSeq ']' | NUM | ID |  BOOL | BINARY | '(' Exp ')'

*****************************************************************************************************************************************************************************************************
*****************************************************************************************************************************************************************************************************
*****************************************************************************************************************************************************************************************************



NUOVI TOKEN:


    opAtomici:
        $$)simbolo          TOKEN              Descrizione presa dal pdf nella cartella specifiche

        00)(true|false)     BOOL               Literal di tipo boolean
        00)(0[b|B][0|1]+)   BINARY             Literal interi di tipo binario

        01)!                NOT
        02)opt              OPTIONAL           L’operatore opt restituisce il valore opzionale che contiene il valore ottenuto dalla valutazione dell’operando. Un valore opzionale può contenere un altro valore opzionale.
        03)empty            EMPTY              L’operatore empty restituisce il valore opzionale vuoto (o indefinito), ossia quello che non contiene alcun valore. Se il valore dell’operando non `e opzionale, la valutazione solleva un errore.
        04)def              DEFINED            L’operatore def restituisce il valore true se, e solo se, l’operando si valuta in un valore opzionale non vuoto. Se il valore dell’operando non `e opzionale, la valutazione solleva un errore.
        05)get              GET                L’operatore get restituisce il valore contenuto nel valore opzionale ottenuto dalla valutazione del suo operando, se tale valore esiste. La valutazione solleva un errore se l’operando si valuta nel valore opzionale vuoto o in un qualsiasi valore non opzionale.

    opBinari:
        06)&&               AND
        07)==               EQUIVALENT

    stmt:
        08)if               IF
        09)else             ELSE
        10)do               DO
        11)while            WHILE



    tokenGiàEsistenti:(specificate in StreamTokenizer.java)

        $$)TOKEN            simbolo\i                   Descrizione

        **)EOF              BHO                         fine del file (non so il simbolo)
        **)IDENT            ([a-zA-Z][a-zA-Z0-9]*)      nome di variablie
        **)NUM              (0|[1-9][0-9]*)             numero in base 10
        **)SKIP             (\s+|//.*)                  caratteri da ignorare es. spazi bianchi
        **)IN               :                           operatore associato al for, è il corrispettivo dell' EACH in java
        **)FOR              for                         ciclo
        **)PRINT            print                       stampa
        **)PREFIX           ::
        **)VAR              var                         inizio dichiarazione variabile
        **)PLUS             +                           addizione
        **)TIMES            *                           moltiplicazione
        **)ASSIGN           =                           assegnazione
        **)OPEN_PAR         (
        **)CLOSE_PAR        )
        **)STMT_SEP         ;                           separatora tra 2 STMT
        **)EXP_SEP          ,                           penso separatore di EXP
        **)OPEN_BLOCK       {                           penso aperta graffa
        **)CLOSE_BLOCK      }
        **)MINUS            -                           sottrazione
        **)OPEN_LIST        [                           apetura di una lista
        **)CLOSE_LIST       ]                           chiusura di una lista

*************************************************************************************************************************************************************

TOKEN DA AGGIUNGERE:

    -EMPTY
    -DEFINED
    -GET

    -IF
    -ELSE
    -DO
    -WHILE

TOKE GIA AGGIUNTI:
    -BOOL
    -BINARY
    -AND
    -EQUIVALENT
    -NOT
    -OPTIONAL

TOKEN TESTATI: